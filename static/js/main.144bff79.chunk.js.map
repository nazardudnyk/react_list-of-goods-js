{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","reverseDirection","setReverseDirection","visibleGoods","goods","isReverseDirection","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","prev","map","good","index","ReactDOM","render","document","getElementById"],"mappings":"mPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,MACtBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAWMC,EAtCR,SAA0BC,EAA1B,GAAqE,IAAlCL,EAAiC,EAAjCA,UAAWM,EAAsB,EAAtBA,mBACtCC,EAAa,YAAOF,GAiB1B,OAfIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKJ,EACH,OAAOa,EAAME,cAAcD,GAE7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXN,EACKC,EAAcM,UAGhBN,EAgBcO,CAAiBnB,EAAiB,CACrDK,YACAM,mBAAoBJ,IAGtB,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,IAAcJ,IAE5BsB,QAAS,kBAAMjB,EAAaL,IAL9B,iCAUA,wBACEoB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,IAAcH,IAE5BqB,QAAS,kBAAMjB,EAAaJ,IAL9B,4BAUA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAaf,IAEfgB,QA1CuB,WAC7Bf,GAAoB,SAAAgB,GAAI,OAAKA,MAoCzB,sBAUEnB,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA/CI,WACZf,GAAoB,GACpBF,EAAa,KA0CP,sBASJ,6BACGG,EAAagB,KAAI,SAACC,EAAMC,GAAP,OAChB,oBAAe,UAAQ,OAAvB,SACGD,GADMA,YC1GnBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.144bff79.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'abc';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, isReverseDirection }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverseDirection) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseDirection, setReverseDirection] = useState(false);\n\n  const handleReverseDirection = () => {\n    setReverseDirection(prev => !prev);\n  };\n\n  const reset = () => {\n    setReverseDirection(false);\n    setSortField('');\n  };\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReverseDirection: reverseDirection,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SORT_FIELD_ALPHABET,\n          })}\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SORT_FIELD_LENGTH,\n          })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !reverseDirection,\n          })}\n          onClick={handleReverseDirection}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseDirection) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {visibleGoods.map((good, index) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}